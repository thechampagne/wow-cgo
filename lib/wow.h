/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "wow.go"

#include <stdlib.h>

typedef enum {
  UNKNOWN = 0,
  ARC,
  ARROW,
  ARROW2,
  ARROW3,
  BALLOON,
  BALLOON2,
  BOUNCE,
  BOUNCINGBALL,
  BOUNCINGBAR,
  BOXBOUNCE,
  BOXBOUNCE2,
  CHRISTMAS,
  CIRCLE,
  CIRCLEHALVES,
  CIRCLEQUARTERS,
  CLOCK,
  DOTS,
  DOTS10,
  DOTS11,
  DOTS12,
  DOTS2,
  DOTS3,
  DOTS4,
  DOTS5,
  DOTS6,
  DOTS7,
  DOTS8,
  DOTS9,
  DQPB,
  EARTH,
  FLIP,
  GRENADE,
  GROWHORIZONTAL,
  GROWVERTICAL,
  HAMBURGER,
  HEARTS,
  LAYER,
  LINE,
  LINE2,
  MONKEY,
  MOON,
  NOISE,
  PIPE,
  POINT,
  PONG,
  RUNNER,
  SHARK,
  SIMPLEDOTS,
  SIMPLEDOTSSCROLLING,
  SMILEY,
  SQUARECORNERS,
  SQUISH,
  STAR,
  STAR2,
  TOGGLE,
  TOGGLE10,
  TOGGLE11,
  TOGGLE12,
  TOGGLE13,
  TOGGLE2,
  TOGGLE3,
  TOGGLE4,
  TOGGLE5,
  TOGGLE6,
  TOGGLE7,
  TOGGLE8,
  TOGGLE9,
  TRIANGLE,
  WEATHER,
} name_t;

typedef struct {
  name_t name;
  int interval;
  int frames_length;
  char** frames;
} spinner_t;

typedef struct {
  int _id;
  int is_terminal;
} wow_t;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern wow_t* wow_init(spinner_t* s, char* text);
extern void wow_persist(wow_t* self);
extern void wow_persist_with(wow_t* self, spinner_t* s, char* text);
extern void wow_spinner(wow_t* self, spinner_t* s);
extern void wow_start(wow_t* self);
extern void wow_stop(wow_t* self);
extern void wow_text(wow_t* self, char* txt);
extern spinner_t* spin_get(name_t name);
extern void wow_clean(wow_t* self);
extern void spinner_clean(spinner_t* self);

#ifdef __cplusplus
}
#endif
